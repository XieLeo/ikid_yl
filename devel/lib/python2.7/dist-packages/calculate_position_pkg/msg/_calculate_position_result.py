# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from calculate_position_pkg/calculate_position_result.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class calculate_position_result(genpy.Message):
  _md5sum = "c72dbb980ec20fffc2f484435fc2b2f3"
  _type = "calculate_position_pkg/calculate_position_result"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 目标检测像素坐标点
int32[] ball_xyxy
int32[] goalpost_xyxy
int32[] robot_xyxy
int32[] L_mark_xyxy
int32[] T_mark_xyxy
int32[] X_mark_xyxy
# PNP计算距离
float64 ball_distance # 原始PNP计算距离
float64 kf_ball_distance # 卡尔曼滤波后的计算距离


"""
  __slots__ = ['ball_xyxy','goalpost_xyxy','robot_xyxy','L_mark_xyxy','T_mark_xyxy','X_mark_xyxy','ball_distance','kf_ball_distance']
  _slot_types = ['int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ball_xyxy,goalpost_xyxy,robot_xyxy,L_mark_xyxy,T_mark_xyxy,X_mark_xyxy,ball_distance,kf_ball_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(calculate_position_result, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ball_xyxy is None:
        self.ball_xyxy = []
      if self.goalpost_xyxy is None:
        self.goalpost_xyxy = []
      if self.robot_xyxy is None:
        self.robot_xyxy = []
      if self.L_mark_xyxy is None:
        self.L_mark_xyxy = []
      if self.T_mark_xyxy is None:
        self.T_mark_xyxy = []
      if self.X_mark_xyxy is None:
        self.X_mark_xyxy = []
      if self.ball_distance is None:
        self.ball_distance = 0.
      if self.kf_ball_distance is None:
        self.kf_ball_distance = 0.
    else:
      self.ball_xyxy = []
      self.goalpost_xyxy = []
      self.robot_xyxy = []
      self.L_mark_xyxy = []
      self.T_mark_xyxy = []
      self.X_mark_xyxy = []
      self.ball_distance = 0.
      self.kf_ball_distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.ball_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.ball_xyxy))
      length = len(self.goalpost_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.goalpost_xyxy))
      length = len(self.robot_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.robot_xyxy))
      length = len(self.L_mark_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.L_mark_xyxy))
      length = len(self.T_mark_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.T_mark_xyxy))
      length = len(self.X_mark_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.X_mark_xyxy))
      _x = self
      buff.write(_get_struct_2d().pack(_x.ball_distance, _x.kf_ball_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ball_xyxy = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.goalpost_xyxy = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_xyxy = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.L_mark_xyxy = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.T_mark_xyxy = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.X_mark_xyxy = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.ball_distance, _x.kf_ball_distance,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.ball_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.ball_xyxy.tostring())
      length = len(self.goalpost_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.goalpost_xyxy.tostring())
      length = len(self.robot_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.robot_xyxy.tostring())
      length = len(self.L_mark_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.L_mark_xyxy.tostring())
      length = len(self.T_mark_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.T_mark_xyxy.tostring())
      length = len(self.X_mark_xyxy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.X_mark_xyxy.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.ball_distance, _x.kf_ball_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ball_xyxy = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.goalpost_xyxy = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_xyxy = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.L_mark_xyxy = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.T_mark_xyxy = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.X_mark_xyxy = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 16
      (_x.ball_distance, _x.kf_ball_distance,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
