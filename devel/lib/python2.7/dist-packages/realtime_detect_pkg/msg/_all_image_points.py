# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realtime_detect_pkg/all_image_points.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import realtime_detect_pkg.msg

class all_image_points(genpy.Message):
  _md5sum = "c8cd15673e10b541cdf32b31b8a02c11"
  _type = "realtime_detect_pkg/all_image_points"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """image_points[] ball_xyxy
image_points[] goalpost_xyxy
image_points[] robot_xyxy
image_points[] L_mark_xyxy
image_points[] T_mark_xyxy
image_points[] X_mark_xyxy

================================================================================
MSG: realtime_detect_pkg/image_points
int32[4] coordinates  # 用于存储一个检测框的四个坐标 [x1, y1, x2, y2]"""
  __slots__ = ['ball_xyxy','goalpost_xyxy','robot_xyxy','L_mark_xyxy','T_mark_xyxy','X_mark_xyxy']
  _slot_types = ['realtime_detect_pkg/image_points[]','realtime_detect_pkg/image_points[]','realtime_detect_pkg/image_points[]','realtime_detect_pkg/image_points[]','realtime_detect_pkg/image_points[]','realtime_detect_pkg/image_points[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ball_xyxy,goalpost_xyxy,robot_xyxy,L_mark_xyxy,T_mark_xyxy,X_mark_xyxy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(all_image_points, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ball_xyxy is None:
        self.ball_xyxy = []
      if self.goalpost_xyxy is None:
        self.goalpost_xyxy = []
      if self.robot_xyxy is None:
        self.robot_xyxy = []
      if self.L_mark_xyxy is None:
        self.L_mark_xyxy = []
      if self.T_mark_xyxy is None:
        self.T_mark_xyxy = []
      if self.X_mark_xyxy is None:
        self.X_mark_xyxy = []
    else:
      self.ball_xyxy = []
      self.goalpost_xyxy = []
      self.robot_xyxy = []
      self.L_mark_xyxy = []
      self.T_mark_xyxy = []
      self.X_mark_xyxy = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.ball_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.ball_xyxy:
        buff.write(_get_struct_4i().pack(*val1.coordinates))
      length = len(self.goalpost_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.goalpost_xyxy:
        buff.write(_get_struct_4i().pack(*val1.coordinates))
      length = len(self.robot_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_xyxy:
        buff.write(_get_struct_4i().pack(*val1.coordinates))
      length = len(self.L_mark_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.L_mark_xyxy:
        buff.write(_get_struct_4i().pack(*val1.coordinates))
      length = len(self.T_mark_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.T_mark_xyxy:
        buff.write(_get_struct_4i().pack(*val1.coordinates))
      length = len(self.X_mark_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.X_mark_xyxy:
        buff.write(_get_struct_4i().pack(*val1.coordinates))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ball_xyxy is None:
        self.ball_xyxy = None
      if self.goalpost_xyxy is None:
        self.goalpost_xyxy = None
      if self.robot_xyxy is None:
        self.robot_xyxy = None
      if self.L_mark_xyxy is None:
        self.L_mark_xyxy = None
      if self.T_mark_xyxy is None:
        self.T_mark_xyxy = None
      if self.X_mark_xyxy is None:
        self.X_mark_xyxy = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ball_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = _get_struct_4i().unpack(str[start:end])
        self.ball_xyxy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goalpost_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = _get_struct_4i().unpack(str[start:end])
        self.goalpost_xyxy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = _get_struct_4i().unpack(str[start:end])
        self.robot_xyxy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.L_mark_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = _get_struct_4i().unpack(str[start:end])
        self.L_mark_xyxy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.T_mark_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = _get_struct_4i().unpack(str[start:end])
        self.T_mark_xyxy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.X_mark_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = _get_struct_4i().unpack(str[start:end])
        self.X_mark_xyxy.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.ball_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.ball_xyxy:
        buff.write(val1.coordinates.tostring())
      length = len(self.goalpost_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.goalpost_xyxy:
        buff.write(val1.coordinates.tostring())
      length = len(self.robot_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_xyxy:
        buff.write(val1.coordinates.tostring())
      length = len(self.L_mark_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.L_mark_xyxy:
        buff.write(val1.coordinates.tostring())
      length = len(self.T_mark_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.T_mark_xyxy:
        buff.write(val1.coordinates.tostring())
      length = len(self.X_mark_xyxy)
      buff.write(_struct_I.pack(length))
      for val1 in self.X_mark_xyxy:
        buff.write(val1.coordinates.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ball_xyxy is None:
        self.ball_xyxy = None
      if self.goalpost_xyxy is None:
        self.goalpost_xyxy = None
      if self.robot_xyxy is None:
        self.robot_xyxy = None
      if self.L_mark_xyxy is None:
        self.L_mark_xyxy = None
      if self.T_mark_xyxy is None:
        self.T_mark_xyxy = None
      if self.X_mark_xyxy is None:
        self.X_mark_xyxy = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ball_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
        self.ball_xyxy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goalpost_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
        self.goalpost_xyxy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
        self.robot_xyxy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.L_mark_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
        self.L_mark_xyxy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.T_mark_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
        self.T_mark_xyxy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.X_mark_xyxy = []
      for i in range(0, length):
        val1 = realtime_detect_pkg.msg.image_points()
        start = end
        end += 16
        val1.coordinates = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
        self.X_mark_xyxy.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
