# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ikid_motion_control/cmd_walk.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class cmd_walk(genpy.Message):
  _md5sum = "768710e1aa78c3a3025d8ab3e396f5e8"
  _type = "ikid_motion_control/cmd_walk"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 sx  # 步长
float64 sy   # 步宽
float64 var_theta  # 转角增量
bool walk_with_ball  # 是否带球行走/动态踢球
bool stop_walk   # 停止行走标志位"""
  __slots__ = ['sx','sy','var_theta','walk_with_ball','stop_walk']
  _slot_types = ['float64','float64','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sx,sy,var_theta,walk_with_ball,stop_walk

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cmd_walk, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sx is None:
        self.sx = 0.
      if self.sy is None:
        self.sy = 0.
      if self.var_theta is None:
        self.var_theta = 0.
      if self.walk_with_ball is None:
        self.walk_with_ball = False
      if self.stop_walk is None:
        self.stop_walk = False
    else:
      self.sx = 0.
      self.sy = 0.
      self.var_theta = 0.
      self.walk_with_ball = False
      self.stop_walk = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d2B().pack(_x.sx, _x.sy, _x.var_theta, _x.walk_with_ball, _x.stop_walk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.sx, _x.sy, _x.var_theta, _x.walk_with_ball, _x.stop_walk,) = _get_struct_3d2B().unpack(str[start:end])
      self.walk_with_ball = bool(self.walk_with_ball)
      self.stop_walk = bool(self.stop_walk)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d2B().pack(_x.sx, _x.sy, _x.var_theta, _x.walk_with_ball, _x.stop_walk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.sx, _x.sy, _x.var_theta, _x.walk_with_ball, _x.stop_walk,) = _get_struct_3d2B().unpack(str[start:end])
      self.walk_with_ball = bool(self.walk_with_ball)
      self.stop_walk = bool(self.stop_walk)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d2B = None
def _get_struct_3d2B():
    global _struct_3d2B
    if _struct_3d2B is None:
        _struct_3d2B = struct.Struct("<3d2B")
    return _struct_3d2B
