// Generated by gencpp from file ikid_motion_control/robot_joint.msg
// DO NOT EDIT!


#ifndef IKID_MOTION_CONTROL_MESSAGE_ROBOT_JOINT_H
#define IKID_MOTION_CONTROL_MESSAGE_ROBOT_JOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ikid_motion_control
{
template <class ContainerAllocator>
struct robot_joint_
{
  typedef robot_joint_<ContainerAllocator> Type;

  robot_joint_()
    : joint()  {
    }
  robot_joint_(const ContainerAllocator& _alloc)
    : joint(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_type;
  _joint_type joint;





  typedef boost::shared_ptr< ::ikid_motion_control::robot_joint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ikid_motion_control::robot_joint_<ContainerAllocator> const> ConstPtr;

}; // struct robot_joint_

typedef ::ikid_motion_control::robot_joint_<std::allocator<void> > robot_joint;

typedef boost::shared_ptr< ::ikid_motion_control::robot_joint > robot_jointPtr;
typedef boost::shared_ptr< ::ikid_motion_control::robot_joint const> robot_jointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ikid_motion_control::robot_joint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ikid_motion_control::robot_joint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ikid_motion_control::robot_joint_<ContainerAllocator1> & lhs, const ::ikid_motion_control::robot_joint_<ContainerAllocator2> & rhs)
{
  return lhs.joint == rhs.joint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ikid_motion_control::robot_joint_<ContainerAllocator1> & lhs, const ::ikid_motion_control::robot_joint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ikid_motion_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ikid_motion_control::robot_joint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ikid_motion_control::robot_joint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ikid_motion_control::robot_joint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ikid_motion_control::robot_joint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ikid_motion_control::robot_joint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ikid_motion_control::robot_joint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ikid_motion_control::robot_joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d98f45f5f7d408b6a0d45a64e4813c5";
  }

  static const char* value(const ::ikid_motion_control::robot_joint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d98f45f5f7d408bULL;
  static const uint64_t static_value2 = 0x6a0d45a64e4813c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ikid_motion_control::robot_joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ikid_motion_control/robot_joint";
  }

  static const char* value(const ::ikid_motion_control::robot_joint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ikid_motion_control::robot_joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] joint  # 各关节位置数据\n"
;
  }

  static const char* value(const ::ikid_motion_control::robot_joint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ikid_motion_control::robot_joint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_joint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ikid_motion_control::robot_joint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ikid_motion_control::robot_joint_<ContainerAllocator>& v)
  {
    s << indent << "joint[]" << std::endl;
    for (size_t i = 0; i < v.joint.size(); ++i)
    {
      s << indent << "  joint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IKID_MOTION_CONTROL_MESSAGE_ROBOT_JOINT_H
