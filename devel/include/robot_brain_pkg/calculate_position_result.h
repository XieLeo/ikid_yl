// Generated by gencpp from file robot_brain_pkg/calculate_position_result.msg
// DO NOT EDIT!


#ifndef ROBOT_BRAIN_PKG_MESSAGE_CALCULATE_POSITION_RESULT_H
#define ROBOT_BRAIN_PKG_MESSAGE_CALCULATE_POSITION_RESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_brain_pkg
{
template <class ContainerAllocator>
struct calculate_position_result_
{
  typedef calculate_position_result_<ContainerAllocator> Type;

  calculate_position_result_()
    : football_xyxy()
    , goal_xyxy()
    , net_xyxy()
    , robot_xyxy()
    , penalty_mark_xyxy()
    , center_circle_xyxy()
    , distance(0.0)
    , kf_distance(0.0)  {
    }
  calculate_position_result_(const ContainerAllocator& _alloc)
    : football_xyxy(_alloc)
    , goal_xyxy(_alloc)
    , net_xyxy(_alloc)
    , robot_xyxy(_alloc)
    , penalty_mark_xyxy(_alloc)
    , center_circle_xyxy(_alloc)
    , distance(0.0)
    , kf_distance(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _football_xyxy_type;
  _football_xyxy_type football_xyxy;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _goal_xyxy_type;
  _goal_xyxy_type goal_xyxy;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _net_xyxy_type;
  _net_xyxy_type net_xyxy;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _robot_xyxy_type;
  _robot_xyxy_type robot_xyxy;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _penalty_mark_xyxy_type;
  _penalty_mark_xyxy_type penalty_mark_xyxy;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _center_circle_xyxy_type;
  _center_circle_xyxy_type center_circle_xyxy;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _kf_distance_type;
  _kf_distance_type kf_distance;





  typedef boost::shared_ptr< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> const> ConstPtr;

}; // struct calculate_position_result_

typedef ::robot_brain_pkg::calculate_position_result_<std::allocator<void> > calculate_position_result;

typedef boost::shared_ptr< ::robot_brain_pkg::calculate_position_result > calculate_position_resultPtr;
typedef boost::shared_ptr< ::robot_brain_pkg::calculate_position_result const> calculate_position_resultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_brain_pkg::calculate_position_result_<ContainerAllocator1> & lhs, const ::robot_brain_pkg::calculate_position_result_<ContainerAllocator2> & rhs)
{
  return lhs.football_xyxy == rhs.football_xyxy &&
    lhs.goal_xyxy == rhs.goal_xyxy &&
    lhs.net_xyxy == rhs.net_xyxy &&
    lhs.robot_xyxy == rhs.robot_xyxy &&
    lhs.penalty_mark_xyxy == rhs.penalty_mark_xyxy &&
    lhs.center_circle_xyxy == rhs.center_circle_xyxy &&
    lhs.distance == rhs.distance &&
    lhs.kf_distance == rhs.kf_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_brain_pkg::calculate_position_result_<ContainerAllocator1> & lhs, const ::robot_brain_pkg::calculate_position_result_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_brain_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9ec4e75c98d04e4a675f9b544fcf13d";
  }

  static const char* value(const ::robot_brain_pkg::calculate_position_result_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9ec4e75c98d04e4ULL;
  static const uint64_t static_value2 = 0xa675f9b544fcf13dULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_brain_pkg/calculate_position_result";
  }

  static const char* value(const ::robot_brain_pkg::calculate_position_result_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 目标检测像素坐标点\n"
"int32[] football_xyxy\n"
"int32[] goal_xyxy\n"
"int32[] net_xyxy\n"
"int32[] robot_xyxy\n"
"int32[] penalty_mark_xyxy\n"
"int32[] center_circle_xyxy\n"
"# PNP计算距离\n"
"float64 distance # 原始PNP计算距离\n"
"float64 kf_distance # 卡尔曼滤波后的计算距离\n"
;
  }

  static const char* value(const ::robot_brain_pkg::calculate_position_result_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.football_xyxy);
      stream.next(m.goal_xyxy);
      stream.next(m.net_xyxy);
      stream.next(m.robot_xyxy);
      stream.next(m.penalty_mark_xyxy);
      stream.next(m.center_circle_xyxy);
      stream.next(m.distance);
      stream.next(m.kf_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct calculate_position_result_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_brain_pkg::calculate_position_result_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_brain_pkg::calculate_position_result_<ContainerAllocator>& v)
  {
    s << indent << "football_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.football_xyxy.size(); ++i)
    {
      s << indent << "  football_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.football_xyxy[i]);
    }
    s << indent << "goal_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.goal_xyxy.size(); ++i)
    {
      s << indent << "  goal_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.goal_xyxy[i]);
    }
    s << indent << "net_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.net_xyxy.size(); ++i)
    {
      s << indent << "  net_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.net_xyxy[i]);
    }
    s << indent << "robot_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.robot_xyxy.size(); ++i)
    {
      s << indent << "  robot_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.robot_xyxy[i]);
    }
    s << indent << "penalty_mark_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.penalty_mark_xyxy.size(); ++i)
    {
      s << indent << "  penalty_mark_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.penalty_mark_xyxy[i]);
    }
    s << indent << "center_circle_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.center_circle_xyxy.size(); ++i)
    {
      s << indent << "  center_circle_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.center_circle_xyxy[i]);
    }
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "kf_distance: ";
    Printer<double>::stream(s, indent + "  ", v.kf_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_BRAIN_PKG_MESSAGE_CALCULATE_POSITION_RESULT_H
