// Generated by gencpp from file localization_pkg/ObstacleDetection.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_PKG_MESSAGE_OBSTACLEDETECTION_H
#define LOCALIZATION_PKG_MESSAGE_OBSTACLEDETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace localization_pkg
{
template <class ContainerAllocator>
struct ObstacleDetection_
{
  typedef ObstacleDetection_<ContainerAllocator> Type;

  ObstacleDetection_()
    : left_lower_corner()
    , right_lower_corner()  {
    }
  ObstacleDetection_(const ContainerAllocator& _alloc)
    : left_lower_corner(_alloc)
    , right_lower_corner(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _left_lower_corner_type;
  _left_lower_corner_type left_lower_corner;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _right_lower_corner_type;
  _right_lower_corner_type right_lower_corner;





  typedef boost::shared_ptr< ::localization_pkg::ObstacleDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization_pkg::ObstacleDetection_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleDetection_

typedef ::localization_pkg::ObstacleDetection_<std::allocator<void> > ObstacleDetection;

typedef boost::shared_ptr< ::localization_pkg::ObstacleDetection > ObstacleDetectionPtr;
typedef boost::shared_ptr< ::localization_pkg::ObstacleDetection const> ObstacleDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization_pkg::ObstacleDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization_pkg::ObstacleDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::localization_pkg::ObstacleDetection_<ContainerAllocator1> & lhs, const ::localization_pkg::ObstacleDetection_<ContainerAllocator2> & rhs)
{
  return lhs.left_lower_corner == rhs.left_lower_corner &&
    lhs.right_lower_corner == rhs.right_lower_corner;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::localization_pkg::ObstacleDetection_<ContainerAllocator1> & lhs, const ::localization_pkg::ObstacleDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace localization_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::localization_pkg::ObstacleDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization_pkg::ObstacleDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_pkg::ObstacleDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_pkg::ObstacleDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_pkg::ObstacleDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_pkg::ObstacleDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization_pkg::ObstacleDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d667fd4ba057e0adbc55ef5b683aec9a";
  }

  static const char* value(const ::localization_pkg::ObstacleDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd667fd4ba057e0adULL;
  static const uint64_t static_value2 = 0xbc55ef5b683aec9aULL;
};

template<class ContainerAllocator>
struct DataType< ::localization_pkg::ObstacleDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization_pkg/ObstacleDetection";
  }

  static const char* value(const ::localization_pkg::ObstacleDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization_pkg::ObstacleDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point left_lower_corner\n"
"geometry_msgs/Point right_lower_corner\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::localization_pkg::ObstacleDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization_pkg::ObstacleDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_lower_corner);
      stream.next(m.right_lower_corner);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization_pkg::ObstacleDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization_pkg::ObstacleDetection_<ContainerAllocator>& v)
  {
    s << indent << "left_lower_corner: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.left_lower_corner);
    s << indent << "right_lower_corner: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.right_lower_corner);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_PKG_MESSAGE_OBSTACLEDETECTION_H
