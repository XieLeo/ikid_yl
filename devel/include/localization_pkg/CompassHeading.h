// Generated by gencpp from file localization_pkg/CompassHeading.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_PKG_MESSAGE_COMPASSHEADING_H
#define LOCALIZATION_PKG_MESSAGE_COMPASSHEADING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace localization_pkg
{
template <class ContainerAllocator>
struct CompassHeading_
{
  typedef CompassHeading_<ContainerAllocator> Type;

  CompassHeading_()
    : stamp()
    , heading(0.0)  {
    }
  CompassHeading_(const ContainerAllocator& _alloc)
    : stamp()
    , heading(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef float _heading_type;
  _heading_type heading;





  typedef boost::shared_ptr< ::localization_pkg::CompassHeading_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization_pkg::CompassHeading_<ContainerAllocator> const> ConstPtr;

}; // struct CompassHeading_

typedef ::localization_pkg::CompassHeading_<std::allocator<void> > CompassHeading;

typedef boost::shared_ptr< ::localization_pkg::CompassHeading > CompassHeadingPtr;
typedef boost::shared_ptr< ::localization_pkg::CompassHeading const> CompassHeadingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization_pkg::CompassHeading_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization_pkg::CompassHeading_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::localization_pkg::CompassHeading_<ContainerAllocator1> & lhs, const ::localization_pkg::CompassHeading_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.heading == rhs.heading;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::localization_pkg::CompassHeading_<ContainerAllocator1> & lhs, const ::localization_pkg::CompassHeading_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace localization_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::localization_pkg::CompassHeading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization_pkg::CompassHeading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_pkg::CompassHeading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_pkg::CompassHeading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_pkg::CompassHeading_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_pkg::CompassHeading_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization_pkg::CompassHeading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ad4832863e6aeae982283d427018cbf";
  }

  static const char* value(const ::localization_pkg::CompassHeading_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ad4832863e6aeaeULL;
  static const uint64_t static_value2 = 0x982283d427018cbfULL;
};

template<class ContainerAllocator>
struct DataType< ::localization_pkg::CompassHeading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization_pkg/CompassHeading";
  }

  static const char* value(const ::localization_pkg::CompassHeading_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization_pkg::CompassHeading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float32 heading\n"
;
  }

  static const char* value(const ::localization_pkg::CompassHeading_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization_pkg::CompassHeading_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CompassHeading_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization_pkg::CompassHeading_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization_pkg::CompassHeading_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_PKG_MESSAGE_COMPASSHEADING_H
