// Generated by gencpp from file calculate_position_pkg/calculate_position_result.msg
// DO NOT EDIT!


#ifndef CALCULATE_POSITION_PKG_MESSAGE_CALCULATE_POSITION_RESULT_H
#define CALCULATE_POSITION_PKG_MESSAGE_CALCULATE_POSITION_RESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace calculate_position_pkg
{
template <class ContainerAllocator>
struct calculate_position_result_
{
  typedef calculate_position_result_<ContainerAllocator> Type;

  calculate_position_result_()
    : ball_xyxy()
    , goalpost_xyxy()
    , robot_xyxy()
    , L_mark_xyxy()
    , T_mark_xyxy()
    , X_mark_xyxy()
    , ball_distance(0.0)
    , kf_ball_distance(0.0)  {
    }
  calculate_position_result_(const ContainerAllocator& _alloc)
    : ball_xyxy(_alloc)
    , goalpost_xyxy(_alloc)
    , robot_xyxy(_alloc)
    , L_mark_xyxy(_alloc)
    , T_mark_xyxy(_alloc)
    , X_mark_xyxy(_alloc)
    , ball_distance(0.0)
    , kf_ball_distance(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _ball_xyxy_type;
  _ball_xyxy_type ball_xyxy;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _goalpost_xyxy_type;
  _goalpost_xyxy_type goalpost_xyxy;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _robot_xyxy_type;
  _robot_xyxy_type robot_xyxy;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _L_mark_xyxy_type;
  _L_mark_xyxy_type L_mark_xyxy;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _T_mark_xyxy_type;
  _T_mark_xyxy_type T_mark_xyxy;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _X_mark_xyxy_type;
  _X_mark_xyxy_type X_mark_xyxy;

   typedef double _ball_distance_type;
  _ball_distance_type ball_distance;

   typedef double _kf_ball_distance_type;
  _kf_ball_distance_type kf_ball_distance;





  typedef boost::shared_ptr< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> const> ConstPtr;

}; // struct calculate_position_result_

typedef ::calculate_position_pkg::calculate_position_result_<std::allocator<void> > calculate_position_result;

typedef boost::shared_ptr< ::calculate_position_pkg::calculate_position_result > calculate_position_resultPtr;
typedef boost::shared_ptr< ::calculate_position_pkg::calculate_position_result const> calculate_position_resultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::calculate_position_pkg::calculate_position_result_<ContainerAllocator1> & lhs, const ::calculate_position_pkg::calculate_position_result_<ContainerAllocator2> & rhs)
{
  return lhs.ball_xyxy == rhs.ball_xyxy &&
    lhs.goalpost_xyxy == rhs.goalpost_xyxy &&
    lhs.robot_xyxy == rhs.robot_xyxy &&
    lhs.L_mark_xyxy == rhs.L_mark_xyxy &&
    lhs.T_mark_xyxy == rhs.T_mark_xyxy &&
    lhs.X_mark_xyxy == rhs.X_mark_xyxy &&
    lhs.ball_distance == rhs.ball_distance &&
    lhs.kf_ball_distance == rhs.kf_ball_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::calculate_position_pkg::calculate_position_result_<ContainerAllocator1> & lhs, const ::calculate_position_pkg::calculate_position_result_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace calculate_position_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c72dbb980ec20fffc2f484435fc2b2f3";
  }

  static const char* value(const ::calculate_position_pkg::calculate_position_result_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc72dbb980ec20fffULL;
  static const uint64_t static_value2 = 0xc2f484435fc2b2f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calculate_position_pkg/calculate_position_result";
  }

  static const char* value(const ::calculate_position_pkg::calculate_position_result_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 目标检测像素坐标点\n"
"int32[] ball_xyxy\n"
"int32[] goalpost_xyxy\n"
"int32[] robot_xyxy\n"
"int32[] L_mark_xyxy\n"
"int32[] T_mark_xyxy\n"
"int32[] X_mark_xyxy\n"
"# PNP计算距离\n"
"float64 ball_distance # 原始PNP计算距离\n"
"float64 kf_ball_distance # 卡尔曼滤波后的计算距离\n"
"\n"
"\n"
;
  }

  static const char* value(const ::calculate_position_pkg::calculate_position_result_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ball_xyxy);
      stream.next(m.goalpost_xyxy);
      stream.next(m.robot_xyxy);
      stream.next(m.L_mark_xyxy);
      stream.next(m.T_mark_xyxy);
      stream.next(m.X_mark_xyxy);
      stream.next(m.ball_distance);
      stream.next(m.kf_ball_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct calculate_position_result_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calculate_position_pkg::calculate_position_result_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calculate_position_pkg::calculate_position_result_<ContainerAllocator>& v)
  {
    s << indent << "ball_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.ball_xyxy.size(); ++i)
    {
      s << indent << "  ball_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ball_xyxy[i]);
    }
    s << indent << "goalpost_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.goalpost_xyxy.size(); ++i)
    {
      s << indent << "  goalpost_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.goalpost_xyxy[i]);
    }
    s << indent << "robot_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.robot_xyxy.size(); ++i)
    {
      s << indent << "  robot_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.robot_xyxy[i]);
    }
    s << indent << "L_mark_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.L_mark_xyxy.size(); ++i)
    {
      s << indent << "  L_mark_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.L_mark_xyxy[i]);
    }
    s << indent << "T_mark_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.T_mark_xyxy.size(); ++i)
    {
      s << indent << "  T_mark_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.T_mark_xyxy[i]);
    }
    s << indent << "X_mark_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.X_mark_xyxy.size(); ++i)
    {
      s << indent << "  X_mark_xyxy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.X_mark_xyxy[i]);
    }
    s << indent << "ball_distance: ";
    Printer<double>::stream(s, indent + "  ", v.ball_distance);
    s << indent << "kf_ball_distance: ";
    Printer<double>::stream(s, indent + "  ", v.kf_ball_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALCULATE_POSITION_PKG_MESSAGE_CALCULATE_POSITION_RESULT_H
