// Generated by gencpp from file realtime_detect_pkg/all_image_points.msg
// DO NOT EDIT!


#ifndef REALTIME_DETECT_PKG_MESSAGE_ALL_IMAGE_POINTS_H
#define REALTIME_DETECT_PKG_MESSAGE_ALL_IMAGE_POINTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <realtime_detect_pkg/image_points.h>
#include <realtime_detect_pkg/image_points.h>
#include <realtime_detect_pkg/image_points.h>
#include <realtime_detect_pkg/image_points.h>
#include <realtime_detect_pkg/image_points.h>
#include <realtime_detect_pkg/image_points.h>

namespace realtime_detect_pkg
{
template <class ContainerAllocator>
struct all_image_points_
{
  typedef all_image_points_<ContainerAllocator> Type;

  all_image_points_()
    : ball_xyxy()
    , goalpost_xyxy()
    , robot_xyxy()
    , L_mark_xyxy()
    , T_mark_xyxy()
    , X_mark_xyxy()  {
    }
  all_image_points_(const ContainerAllocator& _alloc)
    : ball_xyxy(_alloc)
    , goalpost_xyxy(_alloc)
    , robot_xyxy(_alloc)
    , L_mark_xyxy(_alloc)
    , T_mark_xyxy(_alloc)
    , X_mark_xyxy(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::realtime_detect_pkg::image_points_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::realtime_detect_pkg::image_points_<ContainerAllocator> >> _ball_xyxy_type;
  _ball_xyxy_type ball_xyxy;

   typedef std::vector< ::realtime_detect_pkg::image_points_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::realtime_detect_pkg::image_points_<ContainerAllocator> >> _goalpost_xyxy_type;
  _goalpost_xyxy_type goalpost_xyxy;

   typedef std::vector< ::realtime_detect_pkg::image_points_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::realtime_detect_pkg::image_points_<ContainerAllocator> >> _robot_xyxy_type;
  _robot_xyxy_type robot_xyxy;

   typedef std::vector< ::realtime_detect_pkg::image_points_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::realtime_detect_pkg::image_points_<ContainerAllocator> >> _L_mark_xyxy_type;
  _L_mark_xyxy_type L_mark_xyxy;

   typedef std::vector< ::realtime_detect_pkg::image_points_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::realtime_detect_pkg::image_points_<ContainerAllocator> >> _T_mark_xyxy_type;
  _T_mark_xyxy_type T_mark_xyxy;

   typedef std::vector< ::realtime_detect_pkg::image_points_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::realtime_detect_pkg::image_points_<ContainerAllocator> >> _X_mark_xyxy_type;
  _X_mark_xyxy_type X_mark_xyxy;





  typedef boost::shared_ptr< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> const> ConstPtr;

}; // struct all_image_points_

typedef ::realtime_detect_pkg::all_image_points_<std::allocator<void> > all_image_points;

typedef boost::shared_ptr< ::realtime_detect_pkg::all_image_points > all_image_pointsPtr;
typedef boost::shared_ptr< ::realtime_detect_pkg::all_image_points const> all_image_pointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realtime_detect_pkg::all_image_points_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realtime_detect_pkg::all_image_points_<ContainerAllocator1> & lhs, const ::realtime_detect_pkg::all_image_points_<ContainerAllocator2> & rhs)
{
  return lhs.ball_xyxy == rhs.ball_xyxy &&
    lhs.goalpost_xyxy == rhs.goalpost_xyxy &&
    lhs.robot_xyxy == rhs.robot_xyxy &&
    lhs.L_mark_xyxy == rhs.L_mark_xyxy &&
    lhs.T_mark_xyxy == rhs.T_mark_xyxy &&
    lhs.X_mark_xyxy == rhs.X_mark_xyxy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realtime_detect_pkg::all_image_points_<ContainerAllocator1> & lhs, const ::realtime_detect_pkg::all_image_points_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realtime_detect_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8cd15673e10b541cdf32b31b8a02c11";
  }

  static const char* value(const ::realtime_detect_pkg::all_image_points_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8cd15673e10b541ULL;
  static const uint64_t static_value2 = 0xcdf32b31b8a02c11ULL;
};

template<class ContainerAllocator>
struct DataType< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realtime_detect_pkg/all_image_points";
  }

  static const char* value(const ::realtime_detect_pkg::all_image_points_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_points[] ball_xyxy\n"
"image_points[] goalpost_xyxy\n"
"image_points[] robot_xyxy\n"
"image_points[] L_mark_xyxy\n"
"image_points[] T_mark_xyxy\n"
"image_points[] X_mark_xyxy\n"
"\n"
"================================================================================\n"
"MSG: realtime_detect_pkg/image_points\n"
"int32[4] coordinates  # 用于存储一个检测框的四个坐标 [x1, y1, x2, y2]\n"
;
  }

  static const char* value(const ::realtime_detect_pkg::all_image_points_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ball_xyxy);
      stream.next(m.goalpost_xyxy);
      stream.next(m.robot_xyxy);
      stream.next(m.L_mark_xyxy);
      stream.next(m.T_mark_xyxy);
      stream.next(m.X_mark_xyxy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct all_image_points_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realtime_detect_pkg::all_image_points_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realtime_detect_pkg::all_image_points_<ContainerAllocator>& v)
  {
    s << indent << "ball_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.ball_xyxy.size(); ++i)
    {
      s << indent << "  ball_xyxy[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::realtime_detect_pkg::image_points_<ContainerAllocator> >::stream(s, indent + "    ", v.ball_xyxy[i]);
    }
    s << indent << "goalpost_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.goalpost_xyxy.size(); ++i)
    {
      s << indent << "  goalpost_xyxy[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::realtime_detect_pkg::image_points_<ContainerAllocator> >::stream(s, indent + "    ", v.goalpost_xyxy[i]);
    }
    s << indent << "robot_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.robot_xyxy.size(); ++i)
    {
      s << indent << "  robot_xyxy[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::realtime_detect_pkg::image_points_<ContainerAllocator> >::stream(s, indent + "    ", v.robot_xyxy[i]);
    }
    s << indent << "L_mark_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.L_mark_xyxy.size(); ++i)
    {
      s << indent << "  L_mark_xyxy[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::realtime_detect_pkg::image_points_<ContainerAllocator> >::stream(s, indent + "    ", v.L_mark_xyxy[i]);
    }
    s << indent << "T_mark_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.T_mark_xyxy.size(); ++i)
    {
      s << indent << "  T_mark_xyxy[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::realtime_detect_pkg::image_points_<ContainerAllocator> >::stream(s, indent + "    ", v.T_mark_xyxy[i]);
    }
    s << indent << "X_mark_xyxy[]" << std::endl;
    for (size_t i = 0; i < v.X_mark_xyxy.size(); ++i)
    {
      s << indent << "  X_mark_xyxy[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::realtime_detect_pkg::image_points_<ContainerAllocator> >::stream(s, indent + "    ", v.X_mark_xyxy[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALTIME_DETECT_PKG_MESSAGE_ALL_IMAGE_POINTS_H
