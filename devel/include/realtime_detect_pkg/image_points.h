// Generated by gencpp from file realtime_detect_pkg/image_points.msg
// DO NOT EDIT!


#ifndef REALTIME_DETECT_PKG_MESSAGE_IMAGE_POINTS_H
#define REALTIME_DETECT_PKG_MESSAGE_IMAGE_POINTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace realtime_detect_pkg
{
template <class ContainerAllocator>
struct image_points_
{
  typedef image_points_<ContainerAllocator> Type;

  image_points_()
    : coordinates()  {
      coordinates.assign(0);
  }
  image_points_(const ContainerAllocator& _alloc)
    : coordinates()  {
  (void)_alloc;
      coordinates.assign(0);
  }



   typedef boost::array<int32_t, 4>  _coordinates_type;
  _coordinates_type coordinates;





  typedef boost::shared_ptr< ::realtime_detect_pkg::image_points_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realtime_detect_pkg::image_points_<ContainerAllocator> const> ConstPtr;

}; // struct image_points_

typedef ::realtime_detect_pkg::image_points_<std::allocator<void> > image_points;

typedef boost::shared_ptr< ::realtime_detect_pkg::image_points > image_pointsPtr;
typedef boost::shared_ptr< ::realtime_detect_pkg::image_points const> image_pointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realtime_detect_pkg::image_points_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realtime_detect_pkg::image_points_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realtime_detect_pkg::image_points_<ContainerAllocator1> & lhs, const ::realtime_detect_pkg::image_points_<ContainerAllocator2> & rhs)
{
  return lhs.coordinates == rhs.coordinates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realtime_detect_pkg::image_points_<ContainerAllocator1> & lhs, const ::realtime_detect_pkg::image_points_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realtime_detect_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::realtime_detect_pkg::image_points_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realtime_detect_pkg::image_points_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realtime_detect_pkg::image_points_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realtime_detect_pkg::image_points_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realtime_detect_pkg::image_points_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realtime_detect_pkg::image_points_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realtime_detect_pkg::image_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39d95add7fb2b7fc613712df91e2c161";
  }

  static const char* value(const ::realtime_detect_pkg::image_points_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39d95add7fb2b7fcULL;
  static const uint64_t static_value2 = 0x613712df91e2c161ULL;
};

template<class ContainerAllocator>
struct DataType< ::realtime_detect_pkg::image_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realtime_detect_pkg/image_points";
  }

  static const char* value(const ::realtime_detect_pkg::image_points_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realtime_detect_pkg::image_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[4] coordinates  # 用于存储一个检测框的四个坐标 [x1, y1, x2, y2]\n"
;
  }

  static const char* value(const ::realtime_detect_pkg::image_points_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realtime_detect_pkg::image_points_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.coordinates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct image_points_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realtime_detect_pkg::image_points_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realtime_detect_pkg::image_points_<ContainerAllocator>& v)
  {
    s << indent << "coordinates[]" << std::endl;
    for (size_t i = 0; i < v.coordinates.size(); ++i)
    {
      s << indent << "  coordinates[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.coordinates[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALTIME_DETECT_PKG_MESSAGE_IMAGE_POINTS_H
