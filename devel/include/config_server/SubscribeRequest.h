// Generated by gencpp from file config_server/SubscribeRequest.msg
// DO NOT EDIT!


#ifndef CONFIG_SERVER_MESSAGE_SUBSCRIBEREQUEST_H
#define CONFIG_SERVER_MESSAGE_SUBSCRIBEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <config_server/ParameterDescription.h>

namespace config_server
{
template <class ContainerAllocator>
struct SubscribeRequest_
{
  typedef SubscribeRequest_<ContainerAllocator> Type;

  SubscribeRequest_()
    : prop()
    , callback()
    , desc()  {
    }
  SubscribeRequest_(const ContainerAllocator& _alloc)
    : prop(_alloc)
    , callback(_alloc)
    , desc(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _prop_type;
  _prop_type prop;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _callback_type;
  _callback_type callback;

   typedef  ::config_server::ParameterDescription_<ContainerAllocator>  _desc_type;
  _desc_type desc;





  typedef boost::shared_ptr< ::config_server::SubscribeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::config_server::SubscribeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SubscribeRequest_

typedef ::config_server::SubscribeRequest_<std::allocator<void> > SubscribeRequest;

typedef boost::shared_ptr< ::config_server::SubscribeRequest > SubscribeRequestPtr;
typedef boost::shared_ptr< ::config_server::SubscribeRequest const> SubscribeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::config_server::SubscribeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::config_server::SubscribeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::config_server::SubscribeRequest_<ContainerAllocator1> & lhs, const ::config_server::SubscribeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.prop == rhs.prop &&
    lhs.callback == rhs.callback &&
    lhs.desc == rhs.desc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::config_server::SubscribeRequest_<ContainerAllocator1> & lhs, const ::config_server::SubscribeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace config_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::config_server::SubscribeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::config_server::SubscribeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::config_server::SubscribeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::config_server::SubscribeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::config_server::SubscribeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::config_server::SubscribeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::config_server::SubscribeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8dcf9fcd8cca224c55e3909837a2cc0f";
  }

  static const char* value(const ::config_server::SubscribeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8dcf9fcd8cca224cULL;
  static const uint64_t static_value2 = 0x55e3909837a2cc0fULL;
};

template<class ContainerAllocator>
struct DataType< ::config_server::SubscribeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "config_server/SubscribeRequest";
  }

  static const char* value(const ::config_server::SubscribeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::config_server::SubscribeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string prop\n"
"string callback\n"
"ParameterDescription desc\n"
"\n"
"================================================================================\n"
"MSG: config_server/ParameterDescription\n"
"string name\n"
"string type\n"
"float32 min\n"
"float32 max\n"
"float32 step\n"
"string default_value\n"
;
  }

  static const char* value(const ::config_server::SubscribeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::config_server::SubscribeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prop);
      stream.next(m.callback);
      stream.next(m.desc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SubscribeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::config_server::SubscribeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::config_server::SubscribeRequest_<ContainerAllocator>& v)
  {
    s << indent << "prop: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.prop);
    s << indent << "callback: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.callback);
    s << indent << "desc: ";
    s << std::endl;
    Printer< ::config_server::ParameterDescription_<ContainerAllocator> >::stream(s, indent + "  ", v.desc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONFIG_SERVER_MESSAGE_SUBSCRIBEREQUEST_H
