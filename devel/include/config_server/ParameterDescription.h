// Generated by gencpp from file config_server/ParameterDescription.msg
// DO NOT EDIT!


#ifndef CONFIG_SERVER_MESSAGE_PARAMETERDESCRIPTION_H
#define CONFIG_SERVER_MESSAGE_PARAMETERDESCRIPTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace config_server
{
template <class ContainerAllocator>
struct ParameterDescription_
{
  typedef ParameterDescription_<ContainerAllocator> Type;

  ParameterDescription_()
    : name()
    , type()
    , min(0.0)
    , max(0.0)
    , step(0.0)
    , default_value()  {
    }
  ParameterDescription_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(_alloc)
    , min(0.0)
    , max(0.0)
    , step(0.0)
    , default_value(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef float _min_type;
  _min_type min;

   typedef float _max_type;
  _max_type max;

   typedef float _step_type;
  _step_type step;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _default_value_type;
  _default_value_type default_value;





  typedef boost::shared_ptr< ::config_server::ParameterDescription_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::config_server::ParameterDescription_<ContainerAllocator> const> ConstPtr;

}; // struct ParameterDescription_

typedef ::config_server::ParameterDescription_<std::allocator<void> > ParameterDescription;

typedef boost::shared_ptr< ::config_server::ParameterDescription > ParameterDescriptionPtr;
typedef boost::shared_ptr< ::config_server::ParameterDescription const> ParameterDescriptionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::config_server::ParameterDescription_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::config_server::ParameterDescription_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::config_server::ParameterDescription_<ContainerAllocator1> & lhs, const ::config_server::ParameterDescription_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.type == rhs.type &&
    lhs.min == rhs.min &&
    lhs.max == rhs.max &&
    lhs.step == rhs.step &&
    lhs.default_value == rhs.default_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::config_server::ParameterDescription_<ContainerAllocator1> & lhs, const ::config_server::ParameterDescription_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace config_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::config_server::ParameterDescription_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::config_server::ParameterDescription_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::config_server::ParameterDescription_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::config_server::ParameterDescription_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::config_server::ParameterDescription_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::config_server::ParameterDescription_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::config_server::ParameterDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c0245078b378ba3521082c9d4eee955";
  }

  static const char* value(const ::config_server::ParameterDescription_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c0245078b378ba3ULL;
  static const uint64_t static_value2 = 0x521082c9d4eee955ULL;
};

template<class ContainerAllocator>
struct DataType< ::config_server::ParameterDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "config_server/ParameterDescription";
  }

  static const char* value(const ::config_server::ParameterDescription_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::config_server::ParameterDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string type\n"
"float32 min\n"
"float32 max\n"
"float32 step\n"
"string default_value\n"
;
  }

  static const char* value(const ::config_server::ParameterDescription_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::config_server::ParameterDescription_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.min);
      stream.next(m.max);
      stream.next(m.step);
      stream.next(m.default_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParameterDescription_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::config_server::ParameterDescription_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::config_server::ParameterDescription_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "min: ";
    Printer<float>::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    Printer<float>::stream(s, indent + "  ", v.max);
    s << indent << "step: ";
    Printer<float>::stream(s, indent + "  ", v.step);
    s << indent << "default_value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.default_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONFIG_SERVER_MESSAGE_PARAMETERDESCRIPTION_H
