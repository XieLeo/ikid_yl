// Generated by gencpp from file worker_brain_pkg/head_contol_by_brain.msg
// DO NOT EDIT!


#ifndef WORKER_BRAIN_PKG_MESSAGE_HEAD_CONTOL_BY_BRAIN_H
#define WORKER_BRAIN_PKG_MESSAGE_HEAD_CONTOL_BY_BRAIN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace worker_brain_pkg
{
template <class ContainerAllocator>
struct head_contol_by_brain_
{
  typedef head_contol_by_brain_<ContainerAllocator> Type;

  head_contol_by_brain_()
    : neck_rotation_theta_angle(0.0)
    , neck_front_swing_theta_angle(0.0)
    , is_find_state(false)
    , is_follow_state(false)  {
    }
  head_contol_by_brain_(const ContainerAllocator& _alloc)
    : neck_rotation_theta_angle(0.0)
    , neck_front_swing_theta_angle(0.0)
    , is_find_state(false)
    , is_follow_state(false)  {
  (void)_alloc;
    }



   typedef double _neck_rotation_theta_angle_type;
  _neck_rotation_theta_angle_type neck_rotation_theta_angle;

   typedef double _neck_front_swing_theta_angle_type;
  _neck_front_swing_theta_angle_type neck_front_swing_theta_angle;

   typedef uint8_t _is_find_state_type;
  _is_find_state_type is_find_state;

   typedef uint8_t _is_follow_state_type;
  _is_follow_state_type is_follow_state;





  typedef boost::shared_ptr< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> const> ConstPtr;

}; // struct head_contol_by_brain_

typedef ::worker_brain_pkg::head_contol_by_brain_<std::allocator<void> > head_contol_by_brain;

typedef boost::shared_ptr< ::worker_brain_pkg::head_contol_by_brain > head_contol_by_brainPtr;
typedef boost::shared_ptr< ::worker_brain_pkg::head_contol_by_brain const> head_contol_by_brainConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator1> & lhs, const ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator2> & rhs)
{
  return lhs.neck_rotation_theta_angle == rhs.neck_rotation_theta_angle &&
    lhs.neck_front_swing_theta_angle == rhs.neck_front_swing_theta_angle &&
    lhs.is_find_state == rhs.is_find_state &&
    lhs.is_follow_state == rhs.is_follow_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator1> & lhs, const ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace worker_brain_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e40d90720bf88cd6f3200a64bcb87dbc";
  }

  static const char* value(const ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe40d90720bf88cd6ULL;
  static const uint64_t static_value2 = 0xf3200a64bcb87dbcULL;
};

template<class ContainerAllocator>
struct DataType< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "worker_brain_pkg/head_contol_by_brain";
  }

  static const char* value(const ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 neck_rotation_theta_angle  # 颈旋转关节角度\n"
"float64 neck_front_swing_theta_angle # 颈前摆关节角度\n"
"bool is_find_state # 是否找球状态\n"
"bool is_follow_state # 是否跟球状态\n"
;
  }

  static const char* value(const ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.neck_rotation_theta_angle);
      stream.next(m.neck_front_swing_theta_angle);
      stream.next(m.is_find_state);
      stream.next(m.is_follow_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct head_contol_by_brain_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::worker_brain_pkg::head_contol_by_brain_<ContainerAllocator>& v)
  {
    s << indent << "neck_rotation_theta_angle: ";
    Printer<double>::stream(s, indent + "  ", v.neck_rotation_theta_angle);
    s << indent << "neck_front_swing_theta_angle: ";
    Printer<double>::stream(s, indent + "  ", v.neck_front_swing_theta_angle);
    s << indent << "is_find_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_find_state);
    s << indent << "is_follow_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_follow_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORKER_BRAIN_PKG_MESSAGE_HEAD_CONTOL_BY_BRAIN_H
